class CaesarCipher:
    """
    A comprehensive Caesar cipher implementation with additional features
    """
    
    def __init__(self, shift=3):
        """
        Initialize the cipher with a shift value
        
        Args:
            shift (int): The shift value for encryption/decryption (default: 3)
        """
        self.shift = shift % 26
    
    def encrypt(self, text):
        """
        Encrypt text using Caesar cipher
        
        Args:
            text (str): Text to encrypt
        
        Returns:
            str: Encrypted text
        """
        return self._transform(text, self.shift)
    
    def decrypt(self, text):
        """
        Decrypt text using Caesar cipher
        
        Args:
            text (str): Text to decrypt
        
        Returns:
            str: Decrypted text
        """
        return self._transform(text, -self.shift)
    
    def _transform(self, text, shift):
        """
        Internal method to perform the character transformation
        
        Args:
            text (str): Text to transform
            shift (int): Shift value
        
        Returns:
            str: Transformed text
        """
        result = []
        
        for char in text:
            if char.isupper():
                # Handle uppercase letters
                result.append(chr((ord(char) + shift - 65) % 26 + 65))
            elif char.islower():
                # Handle lowercase letters
                result.append(chr((ord(char) + shift - 97) % 26 + 97))
            else:
                # Keep non-alphabetic characters unchanged
                result.append(char)
        
        return ''.join(result)
    
    def brute_force_decrypt(self, encrypted_text, language='english'):
        """
        Attempt to decrypt without knowing the shift by trying all possibilities
        
        Args:
            encrypted_text (str): The encrypted text
            language (str): Language for frequency analysis hints
        
        Returns:
            dict: All possible decryptions with their shift values
        """
        results = {}
        
        for shift in range(26):
            decrypted = self._transform(encrypted_text, -shift)
            results[shift] = decrypted
        
        return results
    
    def set_shift(self, new_shift):
        """
        Change the shift value
        
        Args:
            new_shift (int): New shift value
        """
        self.shift = new_shift % 26

# Example usage of the class
def demo_caesar_class():
    """Demonstrate the CaesarCipher class"""
    cipher = CaesarCipher(shift=5)
    
    original_text = "The quick brown fox jumps over the lazy dog!"
    
    # Encryption
    encrypted = cipher.encrypt(original_text)
    print(f"Original:  {original_text}")
    print(f"Encrypted: {encrypted}")
    
    # Decryption
    decrypted = cipher.decrypt(encrypted)
    print(f"Decrypted: {decrypted}")
    
    # Brute force attack demonstration
    print("\n--- Brute Force Attack Demo ---")
    brute_results = cipher.brute_force_decrypt(encrypted)
    
    for shift, text in brute_results.items():
        if shift == cipher.shift:
            print(f"Shift {shift:2d}: {text}  <-- CORRECT")
        else:
            print(f"Shift {shift:2d}: {text}")

# Interactive version
def interactive_caesar_cipher():
    """
    Interactive version that allows user to choose encryption/decryption
    """
    print("=== Caesar Cipher Tool ===")
    print("1. Encrypt text")
    print("2. Decrypt text")
    print("3. Brute force decryption")
    print("4. Exit")
    
    while True:
        try:
            choice = input("\nChoose an option (1-4): ").strip()
            
            if choice == '1':
                text = input("Enter text to encrypt: ")
                shift = int(input("Enter shift value: "))
                encrypted = caesar_encrypt(text, shift)
                print(f"Encrypted text: {encrypted}")
                
            elif choice == '2':
                text = input("Enter text to decrypt: ")
                shift = int(input("Enter shift value: "))
                decrypted = caesar_decrypt(text, shift)
                print(f"Decrypted text: {decrypted}")
                
            elif choice == '3':
                text = input("Enter text to brute force decrypt: ")
                print("\nTrying all possible shifts:")
                print("-" * 50)
                
                for shift in range(26):
                    decrypted = caesar_decrypt(text, shift)
                    print(f"Shift {shift:2d}: {decrypted}")
                    
            elif choice == '4':
                print("Goodbye!")
                break
                
            else:
                print("Invalid choice. Please enter 1-4.")
                
        except ValueError:
            print("Please enter a valid number for shift.")
        except KeyboardInterrupt:
            print("\nProgram interrupted. Goodbye!")
            break
        except Exception as e:
            print(f"An error occurred: {e}")

# Additional utility functions
def analyze_frequency(text):
    """
    Analyze character frequency in text (useful for cryptanalysis)
    
    Args:
        text (str): Text to analyze
    
    Returns:
        dict: Frequency count of each character
    """
    frequency = {}
    total_chars = 0
    
    for char in text.lower():
        if char.isalpha():
            frequency[char] = frequency.get(char, 0) + 1
            total_chars += 1
    
    # Convert to percentages
    if total_chars > 0:
        for char in frequency:
            frequency[char] = (frequency[char] / total_chars) * 100
    
    return frequency

def save_to_file(filename, content):
    """Save content to a file"""
    with open(filename, 'w') as f:
        f.write(content)
    print(f"Content saved to {filename}")

def read_from_file(filename):
    """Read content from a file"""
    with open(filename, 'r') as f:
        return f.read()

# Main program
if __name__ == "__main__":
    print("Caesar Cipher Program")
    print("=" * 30)
    
    # Simple demonstration
    print("\n--- Simple Demo ---")
    text = "Caesar Cipher Demonstration"
    shift = 7
    
    encrypted = caesar_encrypt(text, shift)
    decrypted = caesar_decrypt(encrypted, shift)
    
    print(f"Original:  {text}")
    print(f"Shift:     {shift}")
    print(f"Encrypted: {encrypted}")
    print(f"Decrypted: {decrypted}")
    
    # Class demonstration
    print("\n--- Class-Based Demo ---")
    demo_caesar_class()
    
    # Interactive mode
    print("\n--- Interactive Mode ---")
    interactive = input("Start interactive mode? (y/n): ").lower()
    if interactive == 'y':
        interactive_caesar_cipher()
