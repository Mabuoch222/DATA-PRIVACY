import random
import secrets
import string

def generate_word_based_password(num_words=4, separator='-', capitalize=True, add_number=True, add_special_char=True):
    """
    Generate a random password using words from a dictionary
    
    Args:
        num_words (int): Number of words in the password
        separator (str): Character to separate words
        capitalize (bool): Whether to capitalize words
        add_number (bool): Whether to add a random number
        add_special_char (bool): Whether to add a special character
    
    Returns:
        str: Generated password
    """
    # Common English words (you can replace this with a dictionary file)
    word_list = [
        'apple', 'banana', 'carrot', 'dragon', 'elephant', 'forest', 'garden', 'hammer',
        'island', 'jungle', 'knight', 'lighthouse', 'mountain', 'notebook', 'ocean',
        'penguin', 'quasar', 'river', 'sunset', 'tiger', 'umbrella', 'volcano',
        'waterfall', 'xylophone', 'yellow', 'zebra', 'alpha', 'bravo', 'charlie',
        'delta', 'echo', 'foxtrot', 'golf', 'hotel', 'india', 'juliet', 'kilo',
        'lima', 'mike', 'november', 'oscar', 'papa', 'quebec', 'romeo', 'sierra',
        'tango', 'uniform', 'victor', 'whiskey', 'xray', 'yankee', 'zulu'
    ]
    
    # Select random words
    selected_words = secrets.SystemRandom().sample(word_list, num_words)
    
    # Capitalize if requested
    if capitalize:
        selected_words = [word.capitalize() for word in selected_words]
    
    # Join words with separator
    password = separator.join(selected_words)
    
    # Add random number if requested
    if add_number:
        password += str(secrets.randbelow(90) + 10)  # 10-99
    
    # Add special character if requested
    if add_special_char:
        special_chars = '!@#$%&*'
        password += secrets.choice(special_chars)
    
    return password

def generate_password_from_file(filename, num_words=4, **kwargs):
    """
    Generate password using words from a dictionary file
    
    Args:
        filename (str): Path to dictionary file
        num_words (int): Number of words to use
        **kwargs: Additional arguments for password generation
    
    Returns:
        str: Generated password
    """
    try:
        with open(filename, 'r', encoding='utf-8') as file:
            # Read words, filter for reasonable length
            words = [line.strip() for line in file if 3 <= len(line.strip()) <= 10]
        
        if len(words) < num_words:
            print(f"Warning: File has only {len(words)} suitable words, using default word list")
            return generate_word_based_password(num_words, **kwargs)
        
        # Select random words
        selected_words = secrets.SystemRandom().sample(words, num_words)
        
        # Apply same logic as main function
        if kwargs.get('capitalize', True):
            selected_words = [word.capitalize() for word in selected_words]
        
        password = kwargs.get('separator', '-').join(selected_words)
        
        if kwargs.get('add_number', True):
            password += str(secrets.randbelow(90) + 10)
        
        if kwargs.get('add_special_char', True):
            special_chars = '!@#$%&*'
            password += secrets.choice(special_chars)
        
        return password
        
    except FileNotFoundError:
        print(f"Dictionary file '{filename}' not found. Using built-in word list.")
        return generate_word_based_password(num_words, **kwargs)
    except Exception as e:
        print(f"Error reading file: {e}. Using built-in word list.")
        return generate_word_based_password(num_words, **kwargs)

def create_sample_dictionary_file():
    """Create a sample dictionary file for testing"""
    sample_words = """apple
banana
carrot
dragon
elephant
forest
garden
hammer
island
jungle
knight
lighthouse
mountain
notebook
ocean
penguin
quasar
river
sunset
tiger
umbrella
volcano
waterfall
xylophone
zebra"""
    
    with open('dictionary.txt', 'w') as f:
        f.write(sample_words)
    print("Sample dictionary file 'dictionary.txt' created!")

def password_strength_check(password):
    """
    Check the strength of a password
    
    Args:
        password (str): Password to check
    
    Returns:
        str: Strength rating
    """
    length = len(password)
    has_upper = any(c.isupper() for c in password)
    has_lower = any(c.islower() for c in password)
    has_digit = any(c.isdigit() for c in password)
    has_special = any(c in '!@#$%&*' for c in password)
    
    score = 0
    if length >= 12:
        score += 2
    elif length >= 8:
        score += 1
    
    if has_upper:
        score += 1
    if has_lower:
        score += 1
    if has_digit:
        score += 1
    if has_special:
        score += 1
    
    if score >= 5:
        return "Strong"
    elif score >= 3:
        return "Medium"
    else:
        return "Weak"

def main():
    """Main function to generate passwords"""
    print("Random Word Password Generator")
    print("=" * 40)
    
    # Ask if user wants to create sample dictionary
    create_sample = input("Create sample dictionary file? (y/n): ").lower().strip()
    if create_sample == 'y':
        create_sample_dictionary_file()
    
    # Get user preferences
    try:
        num_words = int(input("Number of words in password (default 4): ") or "4")
        separator = input("Separator character (default '-'): ") or "-"
        capitalize = input("Capitalize words? (y/n, default y): ").lower().strip() != 'n'
        add_number = input("Add random number? (y/n, default y): ").lower().strip() != 'n'
        add_special = input("Add special character? (y/n, default y): ").lower().strip() != 'n'
        
        # Try to use dictionary file if available
        use_file = input("Use dictionary file? (y/n, default n): ").lower().strip() == 'y'
        
        if use_file:
            filename = input("Dictionary filename (default 'dictionary.txt'): ") or "dictionary.txt"
            password = generate_password_from_file(
                filename, num_words, 
                separator=separator, 
                capitalize=capitalize, 
                add_number=add_number, 
                add_special_char=add_special
            )
        else:
            password = generate_word_based_password(
                num_words, separator, capitalize, add_number, add_special
            )
        
        # Display results
        print("\n" + "=" * 40)
        print(f"Generated Password: {password}")
        print(f"Password Length: {len(password)}")
        print(f"Strength: {password_strength_check(password)}")
        
        # Generate multiple options
        print("\nAlternative passwords:")
        for i in range(3):
            if use_file:
                alt_password = generate_password_from_file(
                    filename, num_words, 
                    separator=separator, 
                    capitalize=capitalize, 
                    add_number=add_number, 
                    add_special_char=add_special
                )
            else:
                alt_password = generate_word_based_password(
                    num_words, separator, capitalize, add_number, add_special
                )
            print(f"Option {i+1}: {alt_password}")
            
    except ValueError:
        print("Invalid input. Using default settings.")
        password = generate_word_based_password()
        print(f"\nGenerated Password: {password}")

# Simple one-shot version
def quick_generate():
    """Quick password generation without user input"""
    return generate_word_based_password()

if __name__ == "__main__":
    main()
